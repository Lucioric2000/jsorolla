/**
 * Copyright 2015-2020 OpenCB
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * WARNING: AUTOGENERATED CODE
 * 
 * This code was generated by a tool.
 * Autogenerated on: 2020-03-23 15:40:58
 * 
 * Manual changes to this file may cause unexpected behavior in your application.
 * Manual changes to this file will be overwritten if the code is regenerated. 
 *
**/

import OpenCGAParentClass from "../opencga-parent-class.js";


/**
 * This class contains the methods for the "Clinical" resource
 */

export default class Clinical extends OpenCGAParentClass {

    constructor(config) {
        super(config);
    }

    /** Update the set of permissions granted for the member
    * @param {String} members - Comma separated list of user or group ids.
    * @param {Object} data - JSON containing the parameters to add ACLs.
    * @param {Object} [params] - The Object containing the following optional parameters:
    * @param {String} [params.study] - Study [[user@]project:]study where study and project can be either the ID or UUID.
    * @returns {Promise} Promise object in the form of RestResponse instance.
    */
    updateAcl(members, data, params) {
        return this._post("analysis/clinical", members, null, null, "update", data, params);
    }

    /** Create a new clinical analysis
    * @param {Object} data - JSON containing clinical analysis information.
    * @param {Object} [params] - The Object containing the following optional parameters:
    * @param {String} [params.study] - Study [[user@]project:]study where study and project can be either the ID or UUID.
    * @returns {Promise} Promise object in the form of RestResponse instance.
    */
    create(data, params) {
        return this._post("analysis/clinical", null, null, null, "create", data, params);
    }

    /** Cancer Tiering interpretation analysis
    * @param {Object} [params] - The Object containing the following optional parameters:
    * @param {Boolean} [params.includeLowCoverage = "false"] - Include low coverage regions. The default value is false.
    * @param {Number} [params.maxLowCoverage = "20"] - Max. low coverage. The default value is 20.
    * @param {String} [params.study] - Study [[user@]project:]study where study and project can be either the ID or UUID.
    * @param {String} [params.clinicalAnalysisId] - Clinical analysis ID.
    * @param {String} [params.panelIds] - Comma separated list of variant IDs to discard.
    * @returns {Promise} Promise object in the form of RestResponse instance.
    */
    runInterpretationCancerTiering(params) {
        return this._post("analysis/clinical", null, "interpretation/cancerTiering", null, "run", params);
    }

    /** Interpretation custom analysis
    * @param {Object} [params] - The Object containing the following optional parameters:
    * @param {String} [params.include] - Fields included in the response, whole JSON path must be provided.
    * @param {String} [params.exclude] - Fields excluded in the response, whole JSON path must be provided.
    * @param {Number} [params.limit] - Number of results to be returned.
    * @param {Number} [params.skip] - Number of results to skip.
    * @param {Boolean} [params.sort] - Sort the results.
    * @param {Boolean} [params.summary] - Fast fetch of main variant parameters.
    * @param {Boolean} [params.includeLowCoverage = "false"] - Include low coverage regions. The default value is false.
    * @param {Number} [params.maxLowCoverage = "20"] - Max. low coverage. The default value is 20.
    * @param {Boolean} [params.skipUntieredVariants = "false"] - Skip variants without tier assigned. The default value is false.
    * @param {String} [params.id] - List of IDs, these can be rs IDs (dbSNP) or variants in the format chrom:start:ref:alt, e.g.
    *     rs116600158,19:7177679:C:T.
    * @param {String} [params.region] - List of regions, these can be just a single chromosome name or regions in the format chr:start-end,
    *     e.g.: 2,3:100000-200000.
    * @param {String} [params.type] - List of types, accepted values are SNV, MNV, INDEL, SV, CNV, INSERTION, DELETION, e.g. SNV,INDEL.
    * @param {String} [params.reference] - Reference allele.
    * @param {String} [params.alternate] - Main alternate allele.
    * @param {String} [params.project] - Project [user@]project where project can be either the ID or the alias.
    * @param {String} [params.file] - Filter variants from the files specified. This will set includeFile parameter when not provided.
    * @param {String} [params.filter] - Specify the FILTER for any of the files. If 'file' filter is provided, will match the file and the
    *     filter. e.g.: PASS,LowGQX.
    * @param {String} [params.qual] - Specify the QUAL for any of the files. If 'file' filter is provided, will match the file and the qual.
    *     e.g.: >123.4.
    * @param {String} [params.info] - Filter by INFO attributes from file. [{file}:]{key}{op}{value}[,;]* . If no file is specified, will
    *     use all files from "file" filter. e.g. AN>200 or file_1.vcf:AN>200;file_2.vcf:AN<10 . Many INFO fields can be combined. e.g.
    *     file_1.vcf:AN>200;DB=true;file_2.vcf:AN<10.
    * @param {String} [params.sample] - Filter variants where the samples contain the variant (HET or HOM_ALT). Accepts AND (;) and OR (,)
    *     operators. This will automatically set 'includeSample' parameter when not provided.
    * @param {String} [params.genotype] - Samples with a specific genotype: {samp_1}:{gt_1}(,{gt_n})*(;{samp_n}:{gt_1}(,{gt_n})*)* e.g.
    *     HG0097:0/0;HG0098:0/1,1/1. Unphased genotypes (e.g. 0/1, 1/1) will also include phased genotypes (e.g. 0|1, 1|0, 1|1), but not vice
    *     versa. When filtering by multi-allelic genotypes, any secondary allele will match, regardless of its position e.g. 1/2 will match with
    *     genotypes 1/2, 1/3, 1/4, .... Genotype aliases accepted: HOM_REF, HOM_ALT, HET, HET_REF, HET_ALT and MISS  e.g.
    *     HG0097:HOM_REF;HG0098:HET_REF,HOM_ALT. This will automatically set 'includeSample' parameter when not provided.
    * @param {String} [params.format] - Filter by any FORMAT field from samples. [{sample}:]{key}{op}{value}[,;]* . If no sample is
    *     specified, will use all samples from "sample" or "genotype" filter. e.g. DP>200 or HG0097:DP>200,HG0098:DP<10 . Many FORMAT fields can
    *     be combined. e.g. HG0097:DP>200;GT=1/1,0/1,HG0098:DP<10.
    * @param {String} [params.sampleAnnotation] - Selects some samples using metadata information from Catalog. e.g.
    *     age>20;phenotype=hpo:123,hpo:456;name=smith.
    * @param {Boolean} [params.sampleMetadata] - Return the samples metadata group by study. Sample names will appear in the same order as
    *     their corresponding genotypes.
    * @param {String} [params.unknownGenotype] - Returned genotype for unknown genotypes. Common values: [0/0, 0|0, ./.].
    * @param {Number} [params.sampleLimit] - Limit the number of samples to be included in the result.
    * @param {Number} [params.sampleSkip] - Skip some samples from the result. Useful for sample pagination.
    * @param {String} [params.cohort] - Select variants with calculated stats for the selected cohorts.
    * @param {String} [params.cohortStatsRef] - Reference Allele Frequency: [{study:}]{cohort}[<|>|<=|>=]{number}. e.g. ALL<=0.4.
    * @param {String} [params.cohortStatsAlt] - Alternate Allele Frequency: [{study:}]{cohort}[<|>|<=|>=]{number}. e.g. ALL<=0.4.
    * @param {String} [params.cohortStatsMaf] - Minor Allele Frequency: [{study:}]{cohort}[<|>|<=|>=]{number}. e.g. ALL<=0.4.
    * @param {String} [params.cohortStatsMgf] - Minor Genotype Frequency: [{study:}]{cohort}[<|>|<=|>=]{number}. e.g. ALL<=0.4.
    * @param {String} [params.cohortStatsPass] - Filter PASS frequency: [{study:}]{cohort}[<|>|<=|>=]{number}. e.g. ALL>0.8.
    * @param {String} [params.missingAlleles] - Number of missing alleles: [{study:}]{cohort}[<|>|<=|>=]{number}.
    * @param {String} [params.missingGenotypes] - Number of missing genotypes: [{study:}]{cohort}[<|>|<=|>=]{number}.
    * @param {String} [params.score] - Filter by variant score: [{study:}]{score}[<|>|<=|>=]{number}.
    * @param {String} [params.family] - Filter variants where any of the samples from the given family contains the variant (HET or
    *     HOM_ALT).
    * @param {String} [params.familyDisorder] - Specify the disorder to use for the family segregation.
    * @param {String} [params.familySegregation] - Filter by mode of inheritance from a given family. Accepted values: [ monoallelic,
    *     monoallelicIncompletePenetrance, biallelic, biallelicIncompletePenetrance, XlinkedBiallelic, XlinkedMonoallelic, Ylinked,
    *     MendelianError, DeNovo, CompoundHeterozygous ].
    * @param {String} [params.familyMembers] - Sub set of the members of a given family.
    * @param {String} [params.familyProband] - Specify the proband child to use for the family segregation.
    * @param {String} [params.penetrance = "COMPLETE"] - Penetrance. The default value is COMPLETE.
    * @param {String} [params.includeStudy] - List of studies to include in the result. Accepts 'all' and 'none'.
    * @param {String} [params.includeFile] - List of files to be returned. Accepts 'all' and 'none'.
    * @param {String} [params.includeSample] - List of samples to be included in the result. Accepts 'all' and 'none'.
    * @param {String} [params.includeFormat] - List of FORMAT names from Samples Data to include in the output. e.g: DP,AD. Accepts 'all'
    *     and 'none'.
    * @param {String} [params.includeGenotype] - Include genotypes, apart of other formats defined with includeFormat.
    * @param {Boolean} [params.annotationExists] - Return only annotated variants.
    * @param {String} [params.gene] - List of genes, most gene IDs are accepted (HGNC, Ensembl gene, ...). This is an alias to 'xref'
    *     parameter.
    * @param {String} [params.ct] - List of SO consequence types, e.g. missense_variant,stop_lost or SO:0001583,SO:0001578.
    * @param {String} [params.xref] - List of any external reference, these can be genes, proteins or variants. Accepted IDs include HGNC,
    *     Ensembl genes, dbSNP, ClinVar, HPO, Cosmic, ...
    * @param {String} [params.biotype] - List of biotypes, e.g. protein_coding.
    * @param {String} [params.proteinSubstitution] - Protein substitution scores include SIFT and PolyPhen. You can query using the score
    *     {protein_score}[<|>|<=|>=]{number} or the description {protein_score}[~=|=]{description} e.g. polyphen>0.1,sift=tolerant.
    * @param {String} [params.conservation] - Filter by conservation score: {conservation_score}[<|>|<=|>=]{number} e.g.
    *     phastCons>0.5,phylop<0.1,gerp>0.1.
    * @param {String} [params.populationFrequencyAlt] - Alternate Population Frequency: {study}:{population}[<|>|<=|>=]{number}. e.g.
    *     1kG_phase3:ALL<0.01.
    * @param {String} [params.populationFrequencyRef] - Reference Population Frequency: {study}:{population}[<|>|<=|>=]{number}. e.g.
    *     1kG_phase3:ALL<0.01.
    * @param {String} [params.populationFrequencyMaf] - Population minor allele frequency: {study}:{population}[<|>|<=|>=]{number}. e.g.
    *     1kG_phase3:ALL<0.01.
    * @param {String} [params.transcriptFlag] - List of transcript annotation flags. e.g. CCDS, basic, cds_end_NF, mRNA_end_NF,
    *     cds_start_NF, mRNA_start_NF, seleno.
    * @param {String} [params.geneTraitId] - List of gene trait association id. e.g. "umls:C0007222" , "OMIM:269600".
    * @param {String} [params.go] - List of GO (Gene Ontology) terms. e.g. "GO:0002020".
    * @param {String} [params.expression] - List of tissues of interest. e.g. "lung".
    * @param {String} [params.proteinKeyword] - List of Uniprot protein variant annotation keywords.
    * @param {String} [params.drug] - List of drug names.
    * @param {String} [params.functionalScore] - Functional score: {functional_score}[<|>|<=|>=]{number} e.g. cadd_scaled>5.2 ,
    *     cadd_raw<=0.3.
    * @param {String} [params.clinicalSignificance] - Clinical significance: benign, likely_benign, likely_pathogenic, pathogenic.
    * @param {String} [params.customAnnotation] - Custom annotation: {key}[<|>|<=|>=]{number} or {key}[~=|=]{text}.
    * @param {String} [params.panel] - Filter by genes from the given disease panel.
    * @param {String} [params.trait] - List of traits, based on ClinVar, HPO, COSMIC, i.e.: IDs, histologies, descriptions,...
    * @param {String} [params.clinicalAnalysisId] - Clinical analysis ID.
    * @param {String} [params.study] - Study [[user@]project:]study where study and project can be either the ID or UUID.
    * @returns {Promise} Promise object in the form of RestResponse instance.
    */
    runInterpretationCustom(params) {
        return this._post("analysis/clinical", null, "interpretation/custom", null, "run", params);
    }

    /** Index clinical analysis interpretations in the clinical variant database
    * @param {Object} [params] - The Object containing the following optional parameters:
    * @param {String} [params.interpretationId] - Comma separated list of interpretation IDs to be indexed in the clinical variant database.
    * @param {String} [params.clinicalAnalysisId] - Comma separated list of clinical analysis IDs to be indexed in the clinical variant
    *     database.
    * @param {Boolean} [params.false] - Reset the clinical variant database and import the specified interpretations.
    * @param {String} [params.study] - Study [[user@]project:]study where study and project can be either the ID or UUID.
    * @returns {Promise} Promise object in the form of RestResponse instance.
    */
    indexInterpretation(params) {
        return this._get("analysis/clinical", null, "interpretation", null, "index", params);
    }

    /** Search for secondary findings for a given query
    * @param {Object} [params] - The Object containing the following optional parameters:
    * @param {String} [params.include] - Fields included in the response, whole JSON path must be provided.
    * @param {String} [params.exclude] - Fields excluded in the response, whole JSON path must be provided.
    * @param {Number} [params.limit] - Number of results to be returned.
    * @param {Number} [params.skip] - Number of results to skip.
    * @param {Boolean} [params.sort] - Sort the results.
    * @param {Boolean} [params.summary] - Fast fetch of main variant parameters.
    * @param {Boolean} [params.skipUntieredVariants = "false"] - Skip variants without tier assigned. The default value is false.
    * @param {String} [params.id] - List of IDs, these can be rs IDs (dbSNP) or variants in the format chrom:start:ref:alt, e.g.
    *     rs116600158,19:7177679:C:T.
    * @param {String} [params.region] - List of regions, these can be just a single chromosome name or regions in the format chr:start-end,
    *     e.g.: 2,3:100000-200000.
    * @param {String} [params.type] - List of types, accepted values are SNV, MNV, INDEL, SV, CNV, INSERTION, DELETION, e.g. SNV,INDEL.
    * @param {String} [params.reference] - Reference allele.
    * @param {String} [params.alternate] - Main alternate allele.
    * @param {String} [params.project] - Project [user@]project where project can be either the ID or the alias.
    * @param {String} [params.file] - Filter variants from the files specified. This will set includeFile parameter when not provided.
    * @param {String} [params.filter] - Specify the FILTER for any of the files. If 'file' filter is provided, will match the file and the
    *     filter. e.g.: PASS,LowGQX.
    * @param {String} [params.qual] - Specify the QUAL for any of the files. If 'file' filter is provided, will match the file and the qual.
    *     e.g.: >123.4.
    * @param {String} [params.info] - Filter by INFO attributes from file. [{file}:]{key}{op}{value}[,;]* . If no file is specified, will
    *     use all files from "file" filter. e.g. AN>200 or file_1.vcf:AN>200;file_2.vcf:AN<10 . Many INFO fields can be combined. e.g.
    *     file_1.vcf:AN>200;DB=true;file_2.vcf:AN<10.
    * @param {String} [params.sample] - Filter variants where the samples contain the variant (HET or HOM_ALT). Accepts AND (;) and OR (,)
    *     operators. This will automatically set 'includeSample' parameter when not provided.
    * @param {String} [params.genotype] - Samples with a specific genotype: {samp_1}:{gt_1}(,{gt_n})*(;{samp_n}:{gt_1}(,{gt_n})*)* e.g.
    *     HG0097:0/0;HG0098:0/1,1/1. Unphased genotypes (e.g. 0/1, 1/1) will also include phased genotypes (e.g. 0|1, 1|0, 1|1), but not vice
    *     versa. When filtering by multi-allelic genotypes, any secondary allele will match, regardless of its position e.g. 1/2 will match with
    *     genotypes 1/2, 1/3, 1/4, .... Genotype aliases accepted: HOM_REF, HOM_ALT, HET, HET_REF, HET_ALT and MISS  e.g.
    *     HG0097:HOM_REF;HG0098:HET_REF,HOM_ALT. This will automatically set 'includeSample' parameter when not provided.
    * @param {String} [params.format] - Filter by any FORMAT field from samples. [{sample}:]{key}{op}{value}[,;]* . If no sample is
    *     specified, will use all samples from "sample" or "genotype" filter. e.g. DP>200 or HG0097:DP>200,HG0098:DP<10 . Many FORMAT fields can
    *     be combined. e.g. HG0097:DP>200;GT=1/1,0/1,HG0098:DP<10.
    * @param {String} [params.sampleAnnotation] - Selects some samples using metadata information from Catalog. e.g.
    *     age>20;phenotype=hpo:123,hpo:456;name=smith.
    * @param {Boolean} [params.sampleMetadata] - Return the samples metadata group by study. Sample names will appear in the same order as
    *     their corresponding genotypes.
    * @param {String} [params.unknownGenotype] - Returned genotype for unknown genotypes. Common values: [0/0, 0|0, ./.].
    * @param {Number} [params.sampleLimit] - Limit the number of samples to be included in the result.
    * @param {Number} [params.sampleSkip] - Skip some samples from the result. Useful for sample pagination.
    * @param {String} [params.cohort] - Select variants with calculated stats for the selected cohorts.
    * @param {String} [params.cohortStatsRef] - Reference Allele Frequency: [{study:}]{cohort}[<|>|<=|>=]{number}. e.g. ALL<=0.4.
    * @param {String} [params.cohortStatsAlt] - Alternate Allele Frequency: [{study:}]{cohort}[<|>|<=|>=]{number}. e.g. ALL<=0.4.
    * @param {String} [params.cohortStatsMaf] - Minor Allele Frequency: [{study:}]{cohort}[<|>|<=|>=]{number}. e.g. ALL<=0.4.
    * @param {String} [params.cohortStatsMgf] - Minor Genotype Frequency: [{study:}]{cohort}[<|>|<=|>=]{number}. e.g. ALL<=0.4.
    * @param {String} [params.cohortStatsPass] - Filter PASS frequency: [{study:}]{cohort}[<|>|<=|>=]{number}. e.g. ALL>0.8.
    * @param {String} [params.missingAlleles] - Number of missing alleles: [{study:}]{cohort}[<|>|<=|>=]{number}.
    * @param {String} [params.missingGenotypes] - Number of missing genotypes: [{study:}]{cohort}[<|>|<=|>=]{number}.
    * @param {String} [params.score] - Filter by variant score: [{study:}]{score}[<|>|<=|>=]{number}.
    * @param {String} [params.family] - Filter variants where any of the samples from the given family contains the variant (HET or
    *     HOM_ALT).
    * @param {String} [params.familyDisorder] - Specify the disorder to use for the family segregation.
    * @param {String} [params.familySegregation] - Filter by mode of inheritance from a given family. Accepted values: [ monoallelic,
    *     monoallelicIncompletePenetrance, biallelic, biallelicIncompletePenetrance, XlinkedBiallelic, XlinkedMonoallelic, Ylinked,
    *     MendelianError, DeNovo, CompoundHeterozygous ].
    * @param {String} [params.familyMembers] - Sub set of the members of a given family.
    * @param {String} [params.familyProband] - Specify the proband child to use for the family segregation.
    * @param {String} [params.penetrance = "COMPLETE"] - Penetrance. The default value is COMPLETE.
    * @param {String} [params.includeStudy] - List of studies to include in the result. Accepts 'all' and 'none'.
    * @param {String} [params.includeFile] - List of files to be returned. Accepts 'all' and 'none'.
    * @param {String} [params.includeSample] - List of samples to be included in the result. Accepts 'all' and 'none'.
    * @param {String} [params.includeFormat] - List of FORMAT names from Samples Data to include in the output. e.g: DP,AD. Accepts 'all'
    *     and 'none'.
    * @param {String} [params.includeGenotype] - Include genotypes, apart of other formats defined with includeFormat.
    * @param {Boolean} [params.annotationExists] - Return only annotated variants.
    * @param {String} [params.gene] - List of genes, most gene IDs are accepted (HGNC, Ensembl gene, ...). This is an alias to 'xref'
    *     parameter.
    * @param {String} [params.ct] - List of SO consequence types, e.g. missense_variant,stop_lost or SO:0001583,SO:0001578.
    * @param {String} [params.xref] - List of any external reference, these can be genes, proteins or variants. Accepted IDs include HGNC,
    *     Ensembl genes, dbSNP, ClinVar, HPO, Cosmic, ...
    * @param {String} [params.biotype] - List of biotypes, e.g. protein_coding.
    * @param {String} [params.proteinSubstitution] - Protein substitution scores include SIFT and PolyPhen. You can query using the score
    *     {protein_score}[<|>|<=|>=]{number} or the description {protein_score}[~=|=]{description} e.g. polyphen>0.1,sift=tolerant.
    * @param {String} [params.conservation] - Filter by conservation score: {conservation_score}[<|>|<=|>=]{number} e.g.
    *     phastCons>0.5,phylop<0.1,gerp>0.1.
    * @param {String} [params.populationFrequencyAlt] - Alternate Population Frequency: {study}:{population}[<|>|<=|>=]{number}. e.g.
    *     1kG_phase3:ALL<0.01.
    * @param {String} [params.populationFrequencyRef] - Reference Population Frequency: {study}:{population}[<|>|<=|>=]{number}. e.g.
    *     1kG_phase3:ALL<0.01.
    * @param {String} [params.populationFrequencyMaf] - Population minor allele frequency: {study}:{population}[<|>|<=|>=]{number}. e.g.
    *     1kG_phase3:ALL<0.01.
    * @param {String} [params.transcriptFlag] - List of transcript annotation flags. e.g. CCDS, basic, cds_end_NF, mRNA_end_NF,
    *     cds_start_NF, mRNA_start_NF, seleno.
    * @param {String} [params.geneTraitId] - List of gene trait association id. e.g. "umls:C0007222" , "OMIM:269600".
    * @param {String} [params.go] - List of GO (Gene Ontology) terms. e.g. "GO:0002020".
    * @param {String} [params.expression] - List of tissues of interest. e.g. "lung".
    * @param {String} [params.proteinKeyword] - List of Uniprot protein variant annotation keywords.
    * @param {String} [params.drug] - List of drug names.
    * @param {String} [params.functionalScore] - Functional score: {functional_score}[<|>|<=|>=]{number} e.g. cadd_scaled>5.2 ,
    *     cadd_raw<=0.3.
    * @param {String} [params.clinicalSignificance] - Clinical significance: benign, likely_benign, likely_pathogenic, pathogenic.
    * @param {String} [params.customAnnotation] - Custom annotation: {key}[<|>|<=|>=]{number} or {key}[~=|=]{text}.
    * @param {String} [params.panel] - Filter by genes from the given disease panel.
    * @param {String} [params.trait] - List of traits, based on ClinVar, HPO, COSMIC, i.e.: IDs, histologies, descriptions,...
    * @param {String} [params.study] - Study [[user@]project:]study where study and project can be either the ID or UUID.
    * @returns {Promise} Promise object in the form of RestResponse instance.
    */
    primaryFindingsInterpretation(params) {
        return this._get("analysis/clinical", null, "variant", null, "query", params);
    }

    /** Query for reported variants
    * @param {Object} [params] - The Object containing the following optional parameters:
    * @param {String} [params.include] - Fields included in the response, whole JSON path must be provided.
    * @param {String} [params.exclude] - Fields excluded in the response, whole JSON path must be provided.
    * @param {Number} [params.limit] - Number of results to be returned.
    * @param {Number} [params.skip] - Number of results to skip.
    * @param {Boolean} [params.count] - Get the total number of results matching the query. Deactivated by default.
    * @param {Boolean} [params.sort] - Sort the results.
    * @param {Boolean} [params.summary] - Fast fetch of main variant parameters.
    * @param {Boolean} [params.approximateCount] - Get an approximate count, instead of an exact total count. Reduces execution time.
    * @param {Number} [params.approximateCountSamplingSize] - Sampling size to get the approximate count. Larger values increase accuracy
    *     but also increase execution time.
    * @param {String} [params.id] - List of IDs, these can be rs IDs (dbSNP) or variants in the format chrom:start:ref:alt, e.g.
    *     rs116600158,19:7177679:C:T.
    * @param {String} [params.region] - List of regions, these can be just a single chromosome name or regions in the format chr:start-end,
    *     e.g.: 2,3:100000-200000.
    * @param {String} [params.type] - List of types, accepted values are SNV, MNV, INDEL, SV, CNV, INSERTION, DELETION, e.g. SNV,INDEL.
    * @param {String} [params.reference] - Reference allele.
    * @param {String} [params.alternate] - Main alternate allele.
    * @param {String} [params.project] - Project [user@]project where project can be either the ID or the alias.
    * @param {String} [params.study] - Study [[user@]project:]study where study and project can be either the ID or UUID.
    * @param {String} [params.file] - Filter variants from the files specified. This will set includeFile parameter when not provided.
    * @param {String} [params.filter] - Specify the FILTER for any of the files. If 'file' filter is provided, will match the file and the
    *     filter. e.g.: PASS,LowGQX.
    * @param {String} [params.qual] - Specify the QUAL for any of the files. If 'file' filter is provided, will match the file and the qual.
    *     e.g.: >123.4.
    * @param {String} [params.info] - Filter by INFO attributes from file. [{file}:]{key}{op}{value}[,;]* . If no file is specified, will
    *     use all files from "file" filter. e.g. AN>200 or file_1.vcf:AN>200;file_2.vcf:AN<10 . Many INFO fields can be combined. e.g.
    *     file_1.vcf:AN>200;DB=true;file_2.vcf:AN<10.
    * @param {String} [params.sample] - Filter variants where the samples contain the variant (HET or HOM_ALT). Accepts AND (;) and OR (,)
    *     operators. This will automatically set 'includeSample' parameter when not provided.
    * @param {String} [params.genotype] - Samples with a specific genotype: {samp_1}:{gt_1}(,{gt_n})*(;{samp_n}:{gt_1}(,{gt_n})*)* e.g.
    *     HG0097:0/0;HG0098:0/1,1/1. Unphased genotypes (e.g. 0/1, 1/1) will also include phased genotypes (e.g. 0|1, 1|0, 1|1), but not vice
    *     versa. When filtering by multi-allelic genotypes, any secondary allele will match, regardless of its position e.g. 1/2 will match with
    *     genotypes 1/2, 1/3, 1/4, .... Genotype aliases accepted: HOM_REF, HOM_ALT, HET, HET_REF, HET_ALT and MISS  e.g.
    *     HG0097:HOM_REF;HG0098:HET_REF,HOM_ALT. This will automatically set 'includeSample' parameter when not provided.
    * @param {String} [params.format] - Filter by any FORMAT field from samples. [{sample}:]{key}{op}{value}[,;]* . If no sample is
    *     specified, will use all samples from "sample" or "genotype" filter. e.g. DP>200 or HG0097:DP>200,HG0098:DP<10 . Many FORMAT fields can
    *     be combined. e.g. HG0097:DP>200;GT=1/1,0/1,HG0098:DP<10.
    * @param {String} [params.sampleAnnotation] - Selects some samples using metadata information from Catalog. e.g.
    *     age>20;phenotype=hpo:123,hpo:456;name=smith.
    * @param {Boolean} [params.sampleMetadata] - Return the samples metadata group by study. Sample names will appear in the same order as
    *     their corresponding genotypes.
    * @param {String} [params.unknownGenotype] - Returned genotype for unknown genotypes. Common values: [0/0, 0|0, ./.].
    * @param {Number} [params.sampleLimit] - Limit the number of samples to be included in the result.
    * @param {Number} [params.sampleSkip] - Skip some samples from the result. Useful for sample pagination.
    * @param {String} [params.cohort] - Select variants with calculated stats for the selected cohorts.
    * @param {String} [params.cohortStatsRef] - Reference Allele Frequency: [{study:}]{cohort}[<|>|<=|>=]{number}. e.g. ALL<=0.4.
    * @param {String} [params.cohortStatsAlt] - Alternate Allele Frequency: [{study:}]{cohort}[<|>|<=|>=]{number}. e.g. ALL<=0.4.
    * @param {String} [params.cohortStatsMaf] - Minor Allele Frequency: [{study:}]{cohort}[<|>|<=|>=]{number}. e.g. ALL<=0.4.
    * @param {String} [params.cohortStatsMgf] - Minor Genotype Frequency: [{study:}]{cohort}[<|>|<=|>=]{number}. e.g. ALL<=0.4.
    * @param {String} [params.cohortStatsPass] - Filter PASS frequency: [{study:}]{cohort}[<|>|<=|>=]{number}. e.g. ALL>0.8.
    * @param {String} [params.missingAlleles] - Number of missing alleles: [{study:}]{cohort}[<|>|<=|>=]{number}.
    * @param {String} [params.missingGenotypes] - Number of missing genotypes: [{study:}]{cohort}[<|>|<=|>=]{number}.
    * @param {String} [params.score] - Filter by variant score: [{study:}]{score}[<|>|<=|>=]{number}.
    * @param {String} [params.includeStudy] - List of studies to include in the result. Accepts 'all' and 'none'.
    * @param {String} [params.includeFile] - List of files to be returned. Accepts 'all' and 'none'.
    * @param {String} [params.includeSample] - List of samples to be included in the result. Accepts 'all' and 'none'.
    * @param {String} [params.includeFormat] - List of FORMAT names from Samples Data to include in the output. e.g: DP,AD. Accepts 'all'
    *     and 'none'.
    * @param {String} [params.includeGenotype] - Include genotypes, apart of other formats defined with includeFormat.
    * @param {Boolean} [params.annotationExists] - Return only annotated variants.
    * @param {String} [params.gene] - List of genes, most gene IDs are accepted (HGNC, Ensembl gene, ...). This is an alias to 'xref'
    *     parameter.
    * @param {String} [params.ct] - List of SO consequence types, e.g. missense_variant,stop_lost or SO:0001583,SO:0001578.
    * @param {String} [params.xref] - List of any external reference, these can be genes, proteins or variants. Accepted IDs include HGNC,
    *     Ensembl genes, dbSNP, ClinVar, HPO, Cosmic, ...
    * @param {String} [params.biotype] - List of biotypes, e.g. protein_coding.
    * @param {String} [params.proteinSubstitution] - Protein substitution scores include SIFT and PolyPhen. You can query using the score
    *     {protein_score}[<|>|<=|>=]{number} or the description {protein_score}[~=|=]{description} e.g. polyphen>0.1,sift=tolerant.
    * @param {String} [params.conservation] - Filter by conservation score: {conservation_score}[<|>|<=|>=]{number} e.g.
    *     phastCons>0.5,phylop<0.1,gerp>0.1.
    * @param {String} [params.populationFrequencyAlt] - Alternate Population Frequency: {study}:{population}[<|>|<=|>=]{number}. e.g.
    *     1kG_phase3:ALL<0.01.
    * @param {String} [params.populationFrequencyRef] - Reference Population Frequency: {study}:{population}[<|>|<=|>=]{number}. e.g.
    *     1kG_phase3:ALL<0.01.
    * @param {String} [params.populationFrequencyMaf] - Population minor allele frequency: {study}:{population}[<|>|<=|>=]{number}. e.g.
    *     1kG_phase3:ALL<0.01.
    * @param {String} [params.transcriptFlag] - List of transcript annotation flags. e.g. CCDS, basic, cds_end_NF, mRNA_end_NF,
    *     cds_start_NF, mRNA_start_NF, seleno.
    * @param {String} [params.geneTraitId] - List of gene trait association id. e.g. "umls:C0007222" , "OMIM:269600".
    * @param {String} [params.go] - List of GO (Gene Ontology) terms. e.g. "GO:0002020".
    * @param {String} [params.expression] - List of tissues of interest. e.g. "lung".
    * @param {String} [params.proteinKeyword] - List of Uniprot protein variant annotation keywords.
    * @param {String} [params.drug] - List of drug names.
    * @param {String} [params.functionalScore] - Functional score: {functional_score}[<|>|<=|>=]{number} e.g. cadd_scaled>5.2 ,
    *     cadd_raw<=0.3.
    * @param {String} [params.clinicalSignificance] - Clinical significance: benign, likely_benign, likely_pathogenic, pathogenic.
    * @param {String} [params.customAnnotation] - Custom annotation: {key}[<|>|<=|>=]{number} or {key}[~=|=]{text}.
    * @param {String} [params.trait] - List of traits, based on ClinVar, HPO, COSMIC, i.e.: IDs, histologies, descriptions,...
    * @param {String} [params.clinicalAnalysisId] - List of clinical analysis IDs.
    * @param {String} [params.clinicalAnalysisName] - List of clinical analysis names.
    * @param {String} [params.clinicalAnalysisDescr] - Clinical analysis description.
    * @param {String} [params.clinicalAnalysisFiles] - List of clinical analysis files.
    * @param {String} [params.clinicalAnalysisProbandId] - List of proband IDs.
    * @param {String} [params.clinicalAnalysisProbandDisorders] - List of proband disorders.
    * @param {String} [params.clinicalAnalysisProbandPhenotypes] - List of proband phenotypes.
    * @param {String} [params.clinicalAnalysisFamilyId] - List of family IDs.
    * @param {String} [params.clinicalAnalysisFamMemberIds] - List of clinical analysis family member IDs.
    * @param {String} [params.interpretationId] - List of interpretation IDs.
    * @param {String} [params.interpretationSoftwareName] - List of interpretation software names.
    * @param {String} [params.interpretationSoftwareVersion] - List of interpretation software versions.
    * @param {String} [params.interpretationAnalystName] - List of interpretation analysist names.
    * @param {String} [params.interpretationPanels] - List of interpretation panels.
    * @param {String} [params.interpretationDescription] - Interpretation description.
    * @param {String} [params.interpretationDependencies] - List of interpretation dependency, format: name:version, e.g. cellbase:4.0.
    * @param {String} [params.interpretationFilters] - List of interpretation filters.
    * @param {String} [params.interpretationComments] - List of interpretation comments.
    * @param {String} [params.interpretationCreationDate] - Iinterpretation creation date (including date ranges).
    * @param {String} [params.reportedVariantDeNovoQualityScore] - List of reported variant de novo quality scores.
    * @param {String} [params.reportedVariantComments] - List of reported variant comments.
    * @param {String} [params.reportedEventPhenotypeNames] - List of reported event phenotype names.
    * @param {String} [params.reportedEventConsequenceTypeIds] - List of reported event consequence type IDs.
    * @param {String} [params.reportedEventXrefs] - List of reported event phenotype xRefs.
    * @param {String} [params.reportedEventPanelIds] - List of reported event panel IDs.
    * @param {String} [params.reportedEventAcmg] - List of reported event ACMG.
    * @param {String} [params.reportedEventClinicalSignificance] - List of reported event clinical significance.
    * @param {String} [params.reportedEventDrugResponse] - List of reported event drug response.
    * @param {String} [params.reportedEventTraitAssociation] - List of reported event trait association.
    * @param {String} [params.reportedEventFunctionalEffect] - List of reported event functional effect.
    * @param {String} [params.reportedEventTumorigenesis] - List of reported event tumorigenesis.
    * @param {String} [params.reportedEventOtherClassification] - List of reported event other classification.
    * @param {String} [params.reportedEventRolesInCancer] - List of reported event roles in cancer.
    * @returns {Promise} Promise object in the form of RestResponse instance.
    */
    queryInterpretation(params) {
        return this._get("analysis/clinical", null, "interpretation", null, "query", params);
    }

    /** Search for secondary findings for a given sample
    * @param {Object} [params] - The Object containing the following optional parameters:
    * @param {String} [params.sample] - Sample id.
    * @param {String} [params.study] - Study [[user@]project:]study where study and project can be either the ID or UUID.
    * @returns {Promise} Promise object in the form of RestResponse instance.
    */
    secondaryFindingsInterpretation(params) {
        return this._get("analysis/clinical", null, "interpretation", null, "secondaryFindings", params);
    }

    /** Clinical interpretation analysis
    * @param {Object} [params] - The Object containing the following optional parameters:
    * @param {String} [params.include] - Fields included in the response, whole JSON path must be provided.
    * @param {String} [params.exclude] - Fields excluded in the response, whole JSON path must be provided.
    * @param {Number} [params.limit] - Number of results to be returned.
    * @param {Number} [params.skip] - Number of results to skip.
    * @param {Boolean} [params.count] - Get the total number of results matching the query. Deactivated by default.
    * @param {Boolean} [params.sort] - Sort the results.
    * @param {Boolean} [params.summary] - Fast fetch of main variant parameters.
    * @param {Boolean} [params.approximateCount] - Get an approximate count, instead of an exact total count. Reduces execution time.
    * @param {Number} [params.approximateCountSamplingSize] - Sampling size to get the approximate count. Larger values increase accuracy
    *     but also increase execution time.
    * @param {String} [params.id] - List of IDs, these can be rs IDs (dbSNP) or variants in the format chrom:start:ref:alt, e.g.
    *     rs116600158,19:7177679:C:T.
    * @param {String} [params.region] - List of regions, these can be just a single chromosome name or regions in the format chr:start-end,
    *     e.g.: 2,3:100000-200000.
    * @param {String} [params.type] - Clinical analysis type, e.g. DUO, TRIO, ...
    * @param {String} [params.reference] - Reference allele.
    * @param {String} [params.alternate] - Main alternate allele.
    * @param {String} [params.project] - Project [user@]project where project can be either the ID or the alias.
    * @param {String} [params.study] - Study [[user@]project:]study where study and project can be either the ID or UUID.
    * @param {String} [params.file] - Filter variants from the files specified. This will set includeFile parameter when not provided.
    * @param {String} [params.filter] - Specify the FILTER for any of the files. If 'file' filter is provided, will match the file and the
    *     filter. e.g.: PASS,LowGQX.
    * @param {String} [params.qual] - Specify the QUAL for any of the files. If 'file' filter is provided, will match the file and the qual.
    *     e.g.: >123.4.
    * @param {String} [params.info] - Filter by INFO attributes from file. [{file}:]{key}{op}{value}[,;]* . If no file is specified, will
    *     use all files from "file" filter. e.g. AN>200 or file_1.vcf:AN>200;file_2.vcf:AN<10 . Many INFO fields can be combined. e.g.
    *     file_1.vcf:AN>200;DB=true;file_2.vcf:AN<10.
    * @param {String} [params.sample] - Filter variants where the samples contain the variant (HET or HOM_ALT). Accepts AND (;) and OR (,)
    *     operators. This will automatically set 'includeSample' parameter when not provided.
    * @param {String} [params.genotype] - Samples with a specific genotype: {samp_1}:{gt_1}(,{gt_n})*(;{samp_n}:{gt_1}(,{gt_n})*)* e.g.
    *     HG0097:0/0;HG0098:0/1,1/1. Unphased genotypes (e.g. 0/1, 1/1) will also include phased genotypes (e.g. 0|1, 1|0, 1|1), but not vice
    *     versa. When filtering by multi-allelic genotypes, any secondary allele will match, regardless of its position e.g. 1/2 will match with
    *     genotypes 1/2, 1/3, 1/4, .... Genotype aliases accepted: HOM_REF, HOM_ALT, HET, HET_REF, HET_ALT and MISS  e.g.
    *     HG0097:HOM_REF;HG0098:HET_REF,HOM_ALT. This will automatically set 'includeSample' parameter when not provided.
    * @param {String} [params.format] - Filter by any FORMAT field from samples. [{sample}:]{key}{op}{value}[,;]* . If no sample is
    *     specified, will use all samples from "sample" or "genotype" filter. e.g. DP>200 or HG0097:DP>200,HG0098:DP<10 . Many FORMAT fields can
    *     be combined. e.g. HG0097:DP>200;GT=1/1,0/1,HG0098:DP<10.
    * @param {String} [params.sampleAnnotation] - Selects some samples using metadata information from Catalog. e.g.
    *     age>20;phenotype=hpo:123,hpo:456;name=smith.
    * @param {Boolean} [params.sampleMetadata] - Return the samples metadata group by study. Sample names will appear in the same order as
    *     their corresponding genotypes.
    * @param {String} [params.unknownGenotype] - Returned genotype for unknown genotypes. Common values: [0/0, 0|0, ./.].
    * @param {Number} [params.sampleLimit] - Limit the number of samples to be included in the result.
    * @param {Number} [params.sampleSkip] - Skip some samples from the result. Useful for sample pagination.
    * @param {String} [params.cohort] - Select variants with calculated stats for the selected cohorts.
    * @param {String} [params.cohortStatsRef] - Reference Allele Frequency: [{study:}]{cohort}[<|>|<=|>=]{number}. e.g. ALL<=0.4.
    * @param {String} [params.cohortStatsAlt] - Alternate Allele Frequency: [{study:}]{cohort}[<|>|<=|>=]{number}. e.g. ALL<=0.4.
    * @param {String} [params.cohortStatsMaf] - Minor Allele Frequency: [{study:}]{cohort}[<|>|<=|>=]{number}. e.g. ALL<=0.4.
    * @param {String} [params.cohortStatsMgf] - Minor Genotype Frequency: [{study:}]{cohort}[<|>|<=|>=]{number}. e.g. ALL<=0.4.
    * @param {String} [params.cohortStatsPass] - Filter PASS frequency: [{study:}]{cohort}[<|>|<=|>=]{number}. e.g. ALL>0.8.
    * @param {String} [params.missingAlleles] - Number of missing alleles: [{study:}]{cohort}[<|>|<=|>=]{number}.
    * @param {String} [params.missingGenotypes] - Number of missing genotypes: [{study:}]{cohort}[<|>|<=|>=]{number}.
    * @param {String} [params.score] - Filter by variant score: [{study:}]{score}[<|>|<=|>=]{number}.
    * @param {String} [params.includeStudy] - List of studies to include in the result. Accepts 'all' and 'none'.
    * @param {String} [params.includeFile] - List of files to be returned. Accepts 'all' and 'none'.
    * @param {String} [params.includeSample] - List of samples to be included in the result. Accepts 'all' and 'none'.
    * @param {String} [params.includeFormat] - List of FORMAT names from Samples Data to include in the output. e.g: DP,AD. Accepts 'all'
    *     and 'none'.
    * @param {String} [params.includeGenotype] - Include genotypes, apart of other formats defined with includeFormat.
    * @param {Boolean} [params.annotationExists] - Return only annotated variants.
    * @param {String} [params.gene] - List of genes, most gene IDs are accepted (HGNC, Ensembl gene, ...). This is an alias to 'xref'
    *     parameter.
    * @param {String} [params.ct] - List of SO consequence types, e.g. missense_variant,stop_lost or SO:0001583,SO:0001578.
    * @param {String} [params.xref] - List of any external reference, these can be genes, proteins or variants. Accepted IDs include HGNC,
    *     Ensembl genes, dbSNP, ClinVar, HPO, Cosmic, ...
    * @param {String} [params.biotype] - List of biotypes, e.g. protein_coding.
    * @param {String} [params.proteinSubstitution] - Protein substitution scores include SIFT and PolyPhen. You can query using the score
    *     {protein_score}[<|>|<=|>=]{number} or the description {protein_score}[~=|=]{description} e.g. polyphen>0.1,sift=tolerant.
    * @param {String} [params.conservation] - Filter by conservation score: {conservation_score}[<|>|<=|>=]{number} e.g.
    *     phastCons>0.5,phylop<0.1,gerp>0.1.
    * @param {String} [params.populationFrequencyAlt] - Alternate Population Frequency: {study}:{population}[<|>|<=|>=]{number}. e.g.
    *     1kG_phase3:ALL<0.01.
    * @param {String} [params.populationFrequencyRef] - Reference Population Frequency: {study}:{population}[<|>|<=|>=]{number}. e.g.
    *     1kG_phase3:ALL<0.01.
    * @param {String} [params.populationFrequencyMaf] - Population minor allele frequency: {study}:{population}[<|>|<=|>=]{number}. e.g.
    *     1kG_phase3:ALL<0.01.
    * @param {String} [params.transcriptFlag] - List of transcript annotation flags. e.g. CCDS, basic, cds_end_NF, mRNA_end_NF,
    *     cds_start_NF, mRNA_start_NF, seleno.
    * @param {String} [params.geneTraitId] - List of gene trait association id. e.g. "umls:C0007222" , "OMIM:269600".
    * @param {String} [params.go] - List of GO (Gene Ontology) terms. e.g. "GO:0002020".
    * @param {String} [params.expression] - List of tissues of interest. e.g. "lung".
    * @param {String} [params.proteinKeyword] - List of Uniprot protein variant annotation keywords.
    * @param {String} [params.drug] - List of drug names.
    * @param {String} [params.functionalScore] - Functional score: {functional_score}[<|>|<=|>=]{number} e.g. cadd_scaled>5.2 ,
    *     cadd_raw<=0.3.
    * @param {String} [params.clinicalSignificance] - Clinical significance: benign, likely_benign, likely_pathogenic, pathogenic.
    * @param {String} [params.customAnnotation] - Custom annotation: {key}[<|>|<=|>=]{number} or {key}[~=|=]{text}.
    * @param {String} [params.trait] - List of traits, based on ClinVar, HPO, COSMIC, i.e.: IDs, histologies, descriptions,...
    * @param {String} [params.field] - Facet field for categorical fields.
    * @param {String} [params.fieldRange] - Facet field range for continuous fields.
    * @param {String} [params.clinicalAnalysisId] - Clinical analysis ID.
    * @param {String} [params.disease] - Disease (HPO term).
    * @param {String} [params.familyId] - Family ID.
    * @param {Object} [params.subjectIds] - Comma separated list of subject IDs.
    * @param {String} [params.panelId] - Panel ID.
    * @param {String} [params.panelVersion] - Panel version.
    * @param {Boolean} [params.save] - Save interpretation in Catalog.
    * @param {String} [params.interpretationId] - ID of the stored interpretation.
    * @param {String} [params.interpretationName] - Name of the stored interpretation.
    * @returns {Promise} Promise object in the form of RestResponse instance.
    */
    statsInterpretation(params) {
        return this._get("analysis/clinical", null, "interpretation", null, "stats", params);
    }

    /** TEAM interpretation analysis
    * @param {Object} [params] - The Object containing the following optional parameters:
    * @param {Boolean} [params.includeLowCoverage = "false"] - Include low coverage regions. The default value is false.
    * @param {Number} [params.maxLowCoverage = "20"] - Max. low coverage. The default value is 20.
    * @param {String} [params.study] - Study [[user@]project:]study where study and project can be either the ID or UUID.
    * @param {String} [params.clinicalAnalysisId] - Clinical analysis ID.
    * @param {String} [params.panelIds] - Comma separated list of disease panel IDs.
    * @param {String} [params.familySegregation] - Filter by mode of inheritance from a given family. Accepted values: [ monoallelic,
    *     monoallelicIncompletePenetrance, biallelic, biallelicIncompletePenetrance, XlinkedBiallelic, XlinkedMonoallelic, Ylinked,
    *     MendelianError, DeNovo, CompoundHeterozygous ].
    * @returns {Promise} Promise object in the form of RestResponse instance.
    */
    runInterpretationTeam(params) {
        return this._post("analysis/clinical", null, "interpretation/team", null, "run", params);
    }

    /** GEL Tiering interpretation analysis
    * @param {Object} [params] - The Object containing the following optional parameters:
    * @param {Boolean} [params.includeLowCoverage = "false"] - Include low coverage regions. The default value is false.
    * @param {Number} [params.maxLowCoverage = "20"] - Max. low coverage. The default value is 20.
    * @param {String} [params.study] - Study [[user@]project:]study where study and project can be either the ID or UUID.
    * @param {String} [params.clinicalAnalysisId] - Clinical analysis ID.
    * @param {String} [params.panelIds] - Comma separated list of disease panel IDs.
    * @param {String} [params.penetrance = "COMPLETE"] - Penetrance. The default value is COMPLETE.
    * @returns {Promise} Promise object in the form of RestResponse instance.
    */
    runInterpretationTiering(params) {
        return this._post("analysis/clinical", null, "interpretation/tiering", null, "run", params);
    }

    /** Clinical analysis search.
    * @param {Object} [params] - The Object containing the following optional parameters:
    * @param {String} [params.include] - Fields included in the response, whole JSON path must be provided.
    * @param {String} [params.exclude] - Fields excluded in the response, whole JSON path must be provided.
    * @param {Number} [params.limit] - Number of results to be returned.
    * @param {Number} [params.skip] - Number of results to skip.
    * @param {Boolean} [params.count = "false"] - Get the total number of results matching the query. Deactivated by default. The default
    *     value is false.
    * @param {String} [params.study] - Study [[user@]project:]study where study and project can be either the ID or UUID.
    * @param {String} [params.type] - Clinical analysis type.
    * @param {String} [params.priority] - Priority.
    * @param {String} [params.status] - Clinical analysis status.
    * @param {String} [params.creationDate] - Creation date. Format: yyyyMMddHHmmss. Examples: >2018, 2017-2018, <201805.
    * @param {String} [params.modificationDate] - Modification date. Format: yyyyMMddHHmmss. Examples: >2018, 2017-2018, <201805.
    * @param {String} [params.dueDate] - Due date (Format: yyyyMMddHHmmss. Examples: >2018, 2017-2018, <201805...).
    * @param {String} [params.description] - Description.
    * @param {String} [params.family] - Family id.
    * @param {String} [params.proband] - Proband id.
    * @param {String} [params.sample] - Proband sample.
    * @param {String} [params.analystAssignee] - Clinical analyst assignee.
    * @param {String} [params.disorder] - Disorder id or name.
    * @param {String} [params.flags] - Flags.
    * @param {String} [params.release] - Release value.
    * @param {String} [params.attributes] - Text attributes (Format: sex=male,age>20 ...).
    * @returns {Promise} Promise object in the form of RestResponse instance.
    */
    search(params) {
        return this._get("analysis/clinical", null, null, null, "search", params);
    }

    /** Returns the acl of the clinical analyses. If member is provided, it will only return the acl for the member.
    * @param {String} clinicalAnalyses - Comma separated list of clinical analysis IDs or names up to a maximum of 100.
    * @param {Object} [params] - The Object containing the following optional parameters:
    * @param {String} [params.study] - Study [[user@]project:]study where study and project can be either the ID or UUID.
    * @param {String} [params.member] - User or group id.
    * @param {Boolean} [params.silent = "false"] - Boolean to retrieve all possible entries that are queried for, false to raise an
    *     exception whenever one of the entries looked for cannot be shown for whichever reason. The default value is false.
    * @returns {Promise} Promise object in the form of RestResponse instance.
    */
    acl(clinicalAnalyses, params) {
        return this._get("analysis/clinical", clinicalAnalyses, null, null, "acl", params);
    }

    /** Clinical analysis info
    * @param {String} [clinicalAnalyses] - Comma separated list of clinical analysis IDs or names up to a maximum of 100.
    * @param {Object} [params] - The Object containing the following optional parameters:
    * @param {String} [params.include] - Fields included in the response, whole JSON path must be provided.
    * @param {String} [params.exclude] - Fields excluded in the response, whole JSON path must be provided.
    * @param {String} [params.study] - Study [[user@]project:]study where study and project can be either the ID or UUID.
    * @returns {Promise} Promise object in the form of RestResponse instance.
    */
    info(clinicalAnalyses, params) {
        return this._get("analysis/clinical", clinicalAnalyses, null, null, "info", params);
    }

    /** Update clinical analysis attributes
    * @param {String} [clinicalAnalyses] - Comma separated list of clinical analysis ids.
    * @param {Object} data - JSON containing clinical analysis information.
    * @param {Object} [params] - The Object containing the following optional parameters:
    * @param {String} [params.study] - Study [[user@]project:]study where study and project can be either the ID or UUID.
    * @returns {Promise} Promise object in the form of RestResponse instance.
    */
    update(clinicalAnalyses, data, params) {
        return this._post("analysis/clinical", clinicalAnalyses, null, null, "update", data, params);
    }

    /** Add or remove Interpretations to/from a Clinical Analysis
    * @param {String} [clinicalAnalysis] - Clinical analysis ID.
    * @param {Object} data - JSON containing clinical analysis information.
    * @param {Object} [params] - The Object containing the following optional parameters:
    * @param {String} [params.study] - Study [[user@]project:]study where study and project can be either the ID or UUID.
    * @param {String} [params.action = "ADD"] - Action to be performed if the array of interpretations is being updated. The default value
    *     is ADD.
    * @returns {Promise} Promise object in the form of RestResponse instance.
    */
    updateInterpretations(clinicalAnalysis, data, params) {
        return this._post("analysis/clinical", clinicalAnalysis, "interpretations", null, "update", data, params);
    }

    /** Update comments of an Interpretation
    * @param {String} [clinicalAnalysis] - Clinical analysis id.
    * @param {String} [interpretation] - Interpretation id.
    * @param {Object} data - JSON containing a list of comments.
    * @param {Object} [params] - The Object containing the following optional parameters:
    * @param {String} [params.study] - [[user@]project:]study id.
    * @param {String} [params.action = "ADD"] - Action to be performed. The default value is ADD.
    * @returns {Promise} Promise object in the form of RestResponse instance.
    */
    updateComments(clinicalAnalysis, interpretation, data, params) {
        return this._post("analysis/clinical", clinicalAnalysis, "interpretations", interpretation, "comments/update", data, params);
    }

    /** Update reported variants of an interpretation
    * @param {String} [clinicalAnalysis] - Clinical analysis id.
    * @param {String} [interpretation] - Interpretation id.
    * @param {Object} data - JSON containing a list of reported variants.
    * @param {Object} [params] - The Object containing the following optional parameters:
    * @param {String} [params.study] - [[user@]project:]study id.
    * @param {String} [params.action = "ADD"] - Action to be performed. The default value is ADD.
    * @returns {Promise} Promise object in the form of RestResponse instance.
    */
    updatePrimaryFindings(clinicalAnalysis, interpretation, data, params) {
        return this._post("analysis/clinical", clinicalAnalysis, "interpretations", interpretation, "primaryFindings/update", data, params);
    }

    /** Update Interpretation fields
    * @param {String} [clinicalAnalysis] - Clinical analysis id.
    * @param {String} [interpretation] - Interpretation id.
    * @param {Object} data - JSON containing clinical interpretation information.
    * @param {Object} [params] - The Object containing the following optional parameters:
    * @param {String} [params.study] - [[user@]project:]study id.
    * @returns {Promise} Promise object in the form of RestResponse instance.
    */
    updateInterpretation(clinicalAnalysis, interpretation, data, params) {
        return this._post("analysis/clinical", clinicalAnalysis, "interpretations", interpretation, "update", data, params);
    }

}